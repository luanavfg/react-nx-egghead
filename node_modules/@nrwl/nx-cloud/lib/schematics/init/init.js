"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const workspace_1 = require("@nrwl/workspace");
const fs_1 = require("fs");
const child_process_1 = require("child_process");
const rxjs_1 = require("rxjs");
function updateNxJson(ops) {
    return workspace_1.updateJsonInTree('nx.json', (json) => {
        json.tasksRunnerOptions = {
            default: {
                runner: '@nrwl/nx-cloud',
                options: {
                    accessToken: ops.token,
                    cacheableOperations: ['build', 'test', 'lint', 'e2e'],
                    canTrackAnalytics: ops.analytics,
                    showUsageWarnings: true,
                },
            },
        };
        if (process.env.NRWL_API) {
            json.tasksRunnerOptions.default.options.url = process.env.NRWL_API;
        }
        return json;
    });
}
function isCompatibleVersion() {
    const json = JSON.parse(fs_1.readFileSync('package.json').toString());
    let version = json.dependencies['@nrwl/workspace'] ||
        json.devDependencies['@nrwl/workspace'];
    if (!version) {
        throw new Error(`You must use Nx >= 8.0 to enable Nx Cloud`);
    }
    if (version.startsWith('^') || version.startsWith('~')) {
        version = version.substr(1);
    }
    const [major, minor] = version.split('.');
    const majorNumber = Number.parseInt(major, 10);
    if (isNaN(majorNumber))
        return true;
    if (majorNumber >= 9) {
        return true;
    }
    if (Number.parseInt(minor, 10) >= 12) {
        return true;
    }
    return false;
}
function updateWorkspacePackage() {
    console.log(`Updating @nrwl/workspace ot 8.12.10 to make the workspace compatible with Nx Cloud.`);
    if (isYarn()) {
        console.log(`yarn add --dev @nrwl/workspace@8.12.10`);
        child_process_1.execSync(`yarn add --dev @nrwl/workspace@8.12.10`, {
            stdio: ['inherit', 'inherit', 'inherit'],
        });
    }
    else {
        console.log(`npm i --save-dev @nrwl/workspace@8.12.10`);
        child_process_1.execSync(`npm i --save-dev @nrwl/workspace@8.12.10`, {
            stdio: ['inherit', 'inherit', 'inherit'],
        });
    }
}
function isYarn() {
    try {
        return fs_1.statSync('yarn.lock').isFile();
    }
    catch (err) {
        return false;
    }
}
function readNpmScope() {
    const nxJson = JSON.parse(fs_1.readFileSync('nx.json').toString());
    return nxJson.npmScope;
}
function createNxCloudWorkspace(workspaceName) {
    return __awaiter(this, void 0, void 0, function* () {
        const API = process.env.NRWL_API || `https://api.nrwl.io`;
        const response = yield require('axios').post(`${API}/nx-cloud/create-org-and-workspace`, {
            workspaceName,
        });
        if (response.data.message) {
            throw new Error(response.data.message);
        }
        return response.data;
    });
}
function printMessageTaskExecutor(url) {
    return {
        name: 'NxCloudPrintMessage',
        create: () => {
            return Promise.resolve(() => {
                return new rxjs_1.Observable((obs) => {
                    const output = require('@nrwl/workspace/src/utils/output').output;
                    let host = 'nx.app';
                    try {
                        host = new (require('url').URL)(url).host;
                    }
                    catch (e) { }
                    output.note({
                        title: `Nx Cloud has been enabled`,
                        bodyLines: [
                            `Your workspace is currently public. Anybody with code access can view the workspace on ${host}. `,
                            `You can connect the workspace to your Nx Cloud account at ${url}. (You can do this later.)`,
                        ],
                    });
                    obs.next();
                    obs.complete();
                });
            });
        },
    };
}
function init(options) {
    return () => __awaiter(this, void 0, void 0, function* () {
        if (!isCompatibleVersion()) {
            updateWorkspacePackage();
        }
        // this is so the cli doesn't show the message about nothing being done
        return (host, context) => __awaiter(this, void 0, void 0, function* () {
            if (!options.token) {
                const r = yield createNxCloudWorkspace(readNpmScope());
                const engineHost = context.engine.workflow.engineHost;
                engineHost.registerTaskExecutor(printMessageTaskExecutor(r.url));
                context.addTask({
                    toConfiguration() {
                        return { name: 'NxCloudPrintMessage' };
                    },
                });
                updateNxJson({ token: r.token, analytics: false })(host, context);
            }
            else {
                updateNxJson(options)(host, context);
            }
        });
    });
}
exports.default = init;
//# sourceMappingURL=init.js.map