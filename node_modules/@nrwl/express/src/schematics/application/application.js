"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const core_1 = require("@angular-devkit/core");
const workspace_1 = require("@nrwl/workspace");
const workspace_2 = require("@nrwl/workspace");
const init_1 = require("../init/init");
const ast_utils_1 = require("@nrwl/workspace/src/utils/ast-utils");
const to_js_1 = require("@nrwl/workspace/src/utils/rules/to-js");
function addTypes(options) {
    const tsConfigPath = core_1.join(options.appProjectRoot, 'tsconfig.app.json');
    return workspace_1.updateJsonInTree(tsConfigPath, (json) => {
        json.compilerOptions.types = [...json.compilerOptions.types, 'express'];
        return json;
    });
}
function addAppFiles(options) {
    return (host) => {
        host.overwrite(to_js_1.maybeJs(options, core_1.join(options.appProjectRoot, 'src/main.ts')), `/**
 * This is not a production server yet!
 * This is only a minimal backend to get started.
 */

import * as express from 'express';

const app = express();

app.get('/api', (req, res) => {
  res.send({ message: 'Welcome to ${options.name}!' });
});

const port = process.env.port || 3333;
const server = app.listen(port, () => {
  console.log(\`Listening at http://localhost:\${port}/api\`);
});
server.on('error', console.error);
`);
    };
}
function default_1(schema) {
    return (host, context) => {
        const options = normalizeOptions(host, schema);
        return schematics_1.chain([
            init_1.default(Object.assign(Object.assign({}, options), { skipFormat: true })),
            schematics_1.externalSchematic('@nrwl/node', 'application', schema),
            addAppFiles(options),
            addTypes(options),
            workspace_2.formatFiles(options),
        ])(host, context);
    };
}
exports.default = default_1;
function normalizeOptions(host, options) {
    const appDirectory = options.directory
        ? `${workspace_2.toFileName(options.directory)}/${workspace_2.toFileName(options.name)}`
        : workspace_2.toFileName(options.name);
    const appProjectRoot = core_1.join(core_1.normalize(ast_utils_1.appsDir(host)), appDirectory);
    return Object.assign(Object.assign({}, options), { appProjectRoot });
}
//# sourceMappingURL=application.js.map